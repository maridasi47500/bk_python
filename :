from os.path import exists
from urlparse import urlparse, parse_qs
import os
import re
import sqlite3
global path1
global Program
path1 = "/home/mary/ionicsite"

from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer
import SocketServer

import random
global copy

global connection
# connecting to the database
connection = sqlite3.connect("okjj.db")
 
# cursor
global crsr
crsr = connection.cursor()
global __words__
__words__ = ""
 
menuburger=[
{'url':'fullmenu', 'title': "Full Menu",'myurl':"pages/menu/fullmenu.html"},
{'url':'recents', 'title': "Recents",'myurl':"pages/menu/recents.html"},
{'url':'favorite', 'title': "Favorite",'myurl':"pages/menu/favorite.html"},
{'url':'featured', 'title': "Featured",'myurl':"pages/menu/favorite1.html"},
{'url':'family', 'title': "Family bundles",'myurl':"pages/menu/favorite2.html"},
{'url':'flame', 'title': "Flame grilled burgers",'myurl':"pages/menu/favorite3.html"},
{'url':'chicken', 'title': "Chicken & more",'myurl':"pages/menu/favorite4.html"},
{'url':'sides', 'title': "Sides",'myurl':"pages/menu/favorite5.html"},
{'url':'drinks', 'title': "Drinks & coffee",'myurl':"pages/menu/favorite6.html"},
{'url':'sweets', 'title': "Sweets",'myurl':"pages/menu/favorite7.html"},
{'url':'king', 'title': "King Jr.",'myurl':"pages/menu/favorite8.html"}
]

# SQL command to create a table in the database
f=open(path1+"/mespages/dump.sql")
sql_command = f.read()
 
# execute the statement
for sql in sql_command.split(";"):
    print(sql)
    crsr.execute(sql)
connection.commit()
for cat in menuburger:
    crsr.execute(""" insert or ignore into cats (name,url) values ('"""+cat['title']+ """','"""+cat['url']+ """');""")
    connection.commit()
# close the connection
#connection.close()
#s = 'asdf=5;iwantthis123jasd'
#result = re.search('asdf=5;(.*)123jasd', s)
#print(result.group(1))

def card(title,description,button):
    try:
        f=open(path1+"/mespages/card.html")
        s=f.read()
        result = re.search('<h3 class="title">(.*)</h3>', s)
        montitre=(result.group(1) if result is not None else "")
        result = re.search('<p class="subtitle">(.*)</p>', s)
        mysubtitle=(result.group(1) if result is not None else "")
        result = re.search('<a href="">(.*)</a>', s)
        mylink=result.group(1) if result is not None else ""

        html=s.replace(montitre,title).replace(mysubtitle,description).replace(mylink,button)
        return html
    except Exeption as e:
        print("erreur card",e)
        return ""
def bootstrapjs():
    h="""  """
    return h

def bootstrapcss():
    h="""  """
    return h
def header():
    h=open(path1+"/mespages/header.html")
    return h.read()
def footer():
    h=open(path1+"/mespages/footer.html")
    return h.read()    
def copy():
    os.system("cp "+path1+"/mespages/css/css.css "+path1+"/css/css.css")
class directory(object):
    def __init__(self,title):
        self.title = title
        h=header
        i=footer
        self.header=h()
        self.path=""
        self.footer=i()
    def get_content(self):
        return self.content
    def set_content(self,content):
        self.content=content
    def get_header(self):
        return self.header
    def get_footer(self):
        return self.footer
    def set_filename(self,name):  
        self.filename=name
    def title(self,title):
        self.title = title
    def get_title(self):
        return self.title
    def get_path(self):
        return self.path
    def get_filename(self):
        return self.filename
    def set_path(self,mypath):
        self.path=path1+mypath.replace("./","/")
    def path(self,path):
        self.path = path1+path.replace("./","/")

def render_figure(pathname):
    Program.set_filename(pathname)
    
    print("render figure")
    print('ok')
    p1=Program.get_path
    p2=Program.get_filename
    print("okdac")
    print(p1())
    print("okokdac")
    print(p2())
    print(p1()+p2())
    print('dac')
    title=Program.get_title
    header=Program.get_header
    content=Program.get_content
    footer=Program.get_footer
    html="<html>"
    html+="<head>"
    html+="<title>"
    print("title")
    html+=title()
    html+="</title>"
    html+="<link rel=\"stylesheet\" href=\"/css/css.css\"/>"
    html+="</head>"
    html+="<body>"
    print("header")
    html+=header()
    print("content")
    html+=content()
    print("footer")
    html+=footer()
    html+="</body>"
    html+="</html>"
    #print(html)
    result = re.search('<li class=\"mycat\">(.*?)</li>', html)
    #print(result.group(1))
    __words__ = result.group(1) if result is not None else ''
    #print("===words")
    print(__words__)
    mychemin=p1()+("" if (p1()[-1]=="/" or p2()[0] == "/") else "/")+p2()
    print(mychemin)
    with open(mychemin, 'w') as f:
        f.write(html.encode('utf-8'))
    if __words__.encode('utf-8').rstrip() == "Full Menu":
        if len(argv) == 2:
            run(port=int(argv[1]))
        else:
            run()    
Program=directory("Burger King")
#Program.path("./")
class Page:
    global home
    def home():
        try:
            print("home")
            j=open(path1+"/mespages/index.html")
            text=j.read()
            result = re.search("<div class=\"burgers-list\">(.*)</div>",text)
            #print(result.group(1))
            crsr.execute("SELECT * FROM burgers")
            mycontent="<ul>"
            # store all the fetched data in the ans variable
            print("burgersok")
            ans = crsr.fetchall()
            print("burgers")
            for myburger in ans:
                mycontent+= "<li>"+myburger[1]+"</li>"
            print("burgervalue")
            mycontent+="</ul>"
            print(mycontent)
            if result is not None and len(result.group(1)) > 0:
                text=text.replace(result.group(1),mycontent)
            print("cards1")    
            crsr.execute("SELECT * FROM cards")
            print("cards")
            mycontent=""
            # store all the fetched data in the ans variable
            ans = crsr.fetchall()
            print("allcards")
            print("cads")
            for x in ans:
                mycontent+= card(x[1],x[2],x[3])
            #print(mycontent)    
            result = re.search("<div class=\"mycards\">(.*)</div>",text)
            if result is not None:
                print(result)
                if result.group(1):
                    print(result.group(1))
                    if len(result.group(1)) > 0:
                        text=text.replace(result.group(1),mycontent)
            Program.set_path("./")
            Program.set_content(text)
            render_figure("index.html")
        except Exception as e:
            print("erreur 1",e)
    global menu        
    def menu():
        try:
            j=open(path1+"/mespages/menu.html")
            text=j.read()
            res=re.search("<div class=\"myitems\"><ul>(.*)</ul></div>",text)
            result = re.search("<nav class=\"mytabs\"><ul>(.*)</ul></nav>",text)
            #print(result.group(1))
            crsr.execute("SELECT * FROM cats")
            mycontent="<ul>"
            # store all the fetched data in the ans variable
            print("burgersok")
            ans = crsr.fetchall()
            print("burgers")
            for myburger in ans:
                #print("burger",myburger[1],mycontent)
                mycontent+= "<li class=\"mycat\">"+myburger[1].encode('utf-8')+"</li>"
            if result is not None and len(result.group(1)) > 0:
                text=text.replace(result.group(1),mycontent)
            for myburger in ans:
                mesburgers=""
                print("burger?!%*#")
                crsr.execute("SELECT * FROM burgers where cat_id = '"+str(myburger[0])+"'")
                
                ans1 = crsr.fetchall()
                for burger in ans1:
                    #print("burger",burger[1])
                    mesburgers+= "<li>"+burger[1]+"</li>"
                if res is not None and len(res.group(1)) > 0:
                    text=text.replace(res.group(1),mesburgers)
                print("burgervalue")
                #print(myburger[1])
                
                Program.set_path("./menu")
                Program.set_content(text)
                page=(myburger[0] if myburger[0] != '1' else 'index')
                render_figure(str(page)+".html")
        except Exception as e:
            print("erreur menu",e)
    global code        
    def code():
        try:
            print("code")

            Program.set_path("./code")
            Program.set_content("")
            render_figure("index.html")
        except:
            print("erreur 3")
    global offers        
    def offers():
        try:
            print("offers")
            Program.set_path("./offers")
            Program.set_content("")
            render_figure("index.html")
        except:
            print("erreur 4")
    global rewards        
    def rewards():
        try:
            print("rewards")
            Program.set_path("./rewards")
            Program.set_content("")
            render_figure("index.html")
        except:
            print("erreur 5")
class S(BaseHTTPRequestHandler):
    def _set_headers(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()

    def do_GET(self):
        
        #Program.path("./")
        self._set_headers()
        #f = open("index.html", "r")
        query_components = parse_qs(urlparse(self.path).query)
        #print(query_components)
        try:
            if query_components.get("burgername"):
                data_string = query_components["burgername"][0] 
                sql_command = """INSERT INTO burgers (name) VALUES ('""" + data_string + """');"""
                print("ok ok") 
                crsr.execute(sql_command)
                connection.commit()
                try:
                    print("jom")
                    crsr.execute("SELECT * FROM burgers")
                    mycontent="<main><ul>"
                    # store all the fetched data in the ans variable
                    ans = crsr.fetchall()

                    for myburger,name1,image1,description1,prix1 in ans:
                        mycontent+= "<li>"+name1+"</li>"
                    mycontent+="</ul></main>"
                    #print(mycontent)
                    #Program.path("./")
                    print("ok") 
                    print("yeah")
                    Program.set_content(mycontent)
                    render_figure("index.html")
                except Exception as e:
                    print("erreur",e)
                print("okokokok")
                #connection.commit()
                
        except KeyError:
            print("erreur 6")
        #self.data_string = params
        #os.system("echo \""+self.path+"\"")
        patha=path1+self.path.split("?")[0].replace(".html","")+".html"
        pathd=path1+self.path.split("?")[0].replace(".html","")
        pathb=path1+self.path.split("?")[0]+"index.html"
        pathc=path1+self.path.split("?")[0]+"/index.html"
        copy()
        if exists(patha):
            f=open(patha,'r')
            self.wfile.write(f.read())
        elif exists(pathb):
            f=open(pathb,'r')
            self.wfile.write(f.read())
        elif exists(pathc):
            f=open(pathc,'r')
            self.wfile.write(f.read())
        elif exists(pathd):
            f=open(pathd,'r')
            self.wfile.write(f.read())
            
    def do_HEAD(self):
        self._set_headers()

    def do_POST(self):
        
        self._set_headers()
        print "in post method"
        self.data_string = self.rfile.read(int(self.headers['Content-Length']))

        self.send_response(200)
        self.end_headers()
        query_components = parse_qs(urlparse(self.path).query)
        #self.data_string = params
        patha=path1+self.path.split("?")[0].replace(".html","")+".html"
        pathb=path1+self.path.split("?")[0]+"index.html"
        pathc=path1+self.path.split("?")[0]+"/index.html"
        copy()
        if exists(patha):
            f=open(patha,'r')
            self.wfile.write(f.read())
        elif exists(pathb):
            f=open(pathb,'r')
            self.wfile.write(f.read())
        elif exists(pathc):
            f=open(pathc,'r')
            self.wfile.write(f.read())
        return


def run(server_class=HTTPServer, handler_class=S, port=8000):
    server_address = ('', port)
    print("run erver")
    httpd = server_class(server_address, handler_class)
    #print 'http://localhost:8000'
    if len(argv) == 2:
        print 'http://localhost:'+argv[1]
    else:
        print 'http://localhost:8000'
    httpd.serve_forever()

if __name__ == "__main__":
    from sys import argv
home()
menu()
#code()
#rewards()
#offers()
print(__words__.encode('utf-8').rstrip())


